import React from "react";

import { GetServerSideProps } from "next";
import Head from "next/head";

import { ProductsWrapper } from "@/components/products-wrapper";
import { Header } from "@/components/header";
import { Container } from "./styles";
import { Footer } from "@/components/footer/intex";

export interface Products {
  brand: string;
  createdAt: string;
  description: string;
  id: number;
  name: string;
  photo: string;
  price: string;
  updatedAt: string;
}

export interface SelectedProducts extends Products {
  quantity: number;
}

export default function Home(props: { products: Products[] }) {
  const [products, setProducts] = React.useState<Products[]>([]);
  const [selectedProducts, setSelectedProducts] = React.useState<
    SelectedProducts[]
  >([]);

  function handleSelectedProducts(product: Products) {
    let newSelectedProducts = selectedProducts;
    const exitProdut =
      selectedProducts.filter(
        (selectedProduct) => selectedProduct.id === product.id
      ).length > 0;

    if (exitProdut) {
      for (let i = 0; i < selectedProducts.length; i++) {
        if (selectedProducts[i].id === product.id) {
          newSelectedProducts[i] = {
            ...selectedProducts[i],
            quantity: selectedProducts[i].quantity + 1,
          };
        }
      }

      setSelectedProducts(newSelectedProducts);
      return;
    }

    setSelectedProducts((oldValue) => [
      ...oldValue,
      {
        ...product,
        quantity: 1,
      },
    ]);
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header products={selectedProducts} />
      <main>
        <Container>
          <ProductsWrapper
            products={props.products}
            onSelectedProdut={(product) => handleSelectedProducts(product)}
          />
        </Container>
      </main>
      <footer>
        <Footer />
      </footer>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async () => {
  const result = await fetch(
    "https://mks-frontend-challenge-04811e8151e6.herokuapp.com/api/v1/products?page=1&rows=8&sortBy=id&orderBy=ASC"
  );
  const productsResult = await result.json();

  return {
    props: {
      products: productsResult.products,
    },
  };
};

// SSR - SERVER SIDE Rendering

// SSG - STATIC SITE GENERATION

// cient
// tela é carregada -> vai fazer a requisição -> inserir na tela

// server
// fazer a requisição -> montar nossa tela
